# import emoji

from main import Bot
from aiogram import Dispatcher,types
from aiogram.filters.chat_member_updated import \
    ChatMemberUpdatedFilter,  MEMBER, ADMINISTRATOR
from aiogram.types import ChatMemberUpdated

from aiogram import Router, F
from aiogram.types import ChatMemberUpdated,Message,CallbackQuery
from aiogram.filters.command import Command, CommandStart
from aiogram.types import ChatMemberUpdated
from keyboards  import select_work_bot, select_work_bot_on_off, select_action_voicemessage_bot, select_action_video_bot, select_action_file_bot, select_action_gif_bot,format_file_delete
import keyboards




class Settings:
    def __init__(self):
        self.delete_voice_messages = False
        self.delete_video_messages = False
        self.delete_gif_messages = False
        self.delete_filetxt_messages = False
        self.delete_filepdf_messages = False    
        self.delete_filedocx_messages = False
        self.delete_filertf_messages = False
        

    def set_delete_voice_messages(self, value):
        self.delete_voice_messages = value

    def set_delete_video_messages(self, value):
        self.delete_video_messages = value

    def set_delete_gif_messages(self,value):
        self.delete_gif_messages = value
    
    def set_delete_filetxt_messages(self, value):
        self.delete_filetxt_messages = value
        
    def set_delete_filepdf_messages(self, value):
        self.delete_filepdf_messages = value
        
    def set_delete_filedocx_messages(self, value):
        self.delete_filedocx_messages = value
        
    def set_delete_filertf_messages(self, value):
        self.delete_filertf_messages = value

    def get_settings(self):
        return {
            'delete_voice_messages': self.delete_voice_messages,
            'delete_video_messages': self.delete_video_messages,
            'delete_gif_messages': self.delete_gif_messages,
            'delete_filetxt_messages' : self.delete_filetxt_messages,
            'delete_filepdf_messages' : self.delete_filepdf_messages,
            'delete_filedocx_messages' : self.delete_filedocx_messages,
            'delete_filertf_messages' : self.delete_filertf_messages
        }



ID = None

router = Router()

storage = set()

settings = Settings()

@router.message(Command("start"))
async def command_start(message :types.Message):
    await message.answer( text='–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –±–æ—Ç –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é')
    
        
@router.message(Command('about'))
async def command_about(message :types.Message):
    await message.answer(text='/source - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞\n/settings - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n/set_settings - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n/save_rules - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n/rules - –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞')
        
@router.message(Command('source'))
async def comand_source(message :types.Message):
    await message.answer(text='—Å—Å—ã–ª–∫–∞ -> https://www.google.de/')
    
@router.message(Command('rules'))
async def comand_rules(message: types.Message):
    welcome_message = (
        f"–£–≤–∞–∂–µ–Ω–∏–µ üòä: –í—Å–µ–≥–¥–∞ –ø—Ä–æ—è–≤–ª—è–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, —É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n\n"
        f"–ù–µ —Å–ø–∞–º—å—Ç–µ üö´: –ù–µ —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é —Ä–µ–∫–ª–∞–º—É –∏–ª–∏ –Ω–µ–Ω—É–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —Å–ø–∞–º –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üîí: –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –±–µ–∑ –∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∏–º–µ–Ω–∞, –∞–¥—Ä–µ—Å–∞, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
        f"–¢–µ–º–∞—Ç–∏–∫–∞ —á–∞—Ç–∞ üó£Ô∏è: –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–µ–º—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–∞—Ç–∞. –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–ª—É–¥–∞ –∏ –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–º–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        f"–°–æ–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤ ‚öñÔ∏è: –°–æ–±–ª—é–¥–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–æ–Ω—ã –∏ –ø—Ä–∞–≤–∏–ª–∞, –≤–∫–ª—é—á–∞—è –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."
    )

    await message.answer(welcome_message)
    
    

@router.message(Command('admin'))
async def on_help(message: types.Message, bot: Bot):
    result = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    if result.status in ['creator', 'admin']:
        await message.reply("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω –∞–π–¥–∏, –≤–≤–µ–¥–∏—Ç–µ /add_admin –∏ —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n"
                                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω –∞–π–¥–∏, –≤–≤–µ–¥–∏—Ç–µ /get_admin. \n"
                                "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω –∞–π–¥–∏, –≤–≤–µ–¥–∏—Ç–µ /delete_admin –∏ —É–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(Command('add_admin'))
async def on_add_admin(message: types.Message, bot: Bot):
    result = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    if result.status in ['creator', 'admin']:
        ID = message.chat.id
        global storage
        if storage is None:
            storage = set()

        try:
            admin_id = int(message.text.split()[1])
        except IndexError:
            return await message.reply("–ù–µ —É–∫–∞–∑–∞–Ω –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        storage.add(admin_id)
        await message.reply(f"–ê–¥–º–∏–Ω –∞–π–¥–∏ {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")


@router.message(Command('get_admin'))
async def on_get_admin(message: types.Message):
   global storage
   if storage is None:
       await message.reply("–ê–¥–º–∏–Ω –∞–π–¥–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
   else:
       admin_list = "\n".join(map(str, storage))
       await message.reply(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω –∞–π–¥–∏:\n\n{admin_list}")


@router.message(Command('settings'))
async def command_settings(message: Message):
    state_voice = settings.get_settings()["delete_voice_messages"]
    state_video = settings.get_settings()["delete_video_messages"]
    state_gif = settings.get_settings()["delete_gif_messages"]
    state_file_txt = settings.get_settings()["delete_filetxt_messages"]
    state_file_pdf = settings.get_settings()["delete_filepdf_messages"]
    state_file_docx = settings.get_settings()["delete_filedocx_messages"]
    state_file_rtf = settings.get_settings()['delete_filertf_messages']
    
    settings_message = f"""
*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
_–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Å:_ {state_voice}
_–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ:_ {state_video}
_–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏—Ñ:_ {state_gif}
_–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª:_
 *txt* - {state_file_txt}
 *pdf* - {state_file_pdf}
 *docx* - {state_file_docx}
 *rtf* - {state_file_rtf}
"""
    
    await message.answer(settings_message, parse_mode='Markdown')
    
@router.message(Command('delete_admin'))
async def on_delete_admin(message: types.Message):
   global storage
   if storage is None:
       storage = set()

   try:
       admin_id = int(message.text.split()[1])
   except IndexError:
       return await message.reply("–ù–µ —É–∫–∞–∑–∞–Ω –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

   if admin_id in storage:
       storage.remove(admin_id)
       await message.reply(f"–ê–¥–º–∏–Ω –∞–π–¥–∏ {admin_id} —É–¥–∞–ª–µ–Ω.")
   else:
       await message.reply(f"–ê–¥–º–∏–Ω –∞–π–¥–∏ {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    
@router.message(Command('set_settings'))
async def comad_set_settings(message: types.Message,bot: Bot):
    result = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    if message.from_user.id  in storage:
        await message.answer('–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É:', reply_markup=keyboards.select_work_bot)
        
    else:
        await message.reply('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞')
    
    
        
@router.callback_query(F.data.startswith('setting_'))     
async def bot_setting_on(callback: types.CallbackQuery):
    result = callback.data.split('_')[1]
    if result == 'on':
        await callback.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',reply_markup=keyboards.select_work_bot_on_off)
        await callback.message.delete()
    else:
        await callback.message.delete()
    
    
@router.callback_query(F.data.startswith('sett_'))     
async def bot_sett_on(callback: types.CallbackQuery):
    global settings
    
    state_voice = settings.get_settings()["delete_voice_messages"]
    state_video = settings.get_settings()["delete_video_messages"]
    state_gif = settings.get_settings()["delete_gif_messages"]
    state_file_txt = settings.get_settings()["delete_filetxt_messages"]
    state_file_pdf = settings.get_settings()["delete_filepdf_messages"]
    state_file_docx = settings.get_settings()["delete_filedocx_messages"]
    state_file_rtf = settings.get_settings()['delete_filertf_messages']
     
    
    result = callback.data.split('_')[1]
    if result == 'voicemessages':
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Å\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_voice}',reply_markup=keyboards.select_action_voicemessage_bot)
        await callback.message.delete()
    elif result == 'video':
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_video}',reply_markup=keyboards.select_action_video_bot)
        await callback.message.delete()    
    elif result == 'gif':
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏—Ñ\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_gif}',reply_markup=keyboards.select_action_gif_bot)
        await callback.message.delete()
    elif result == 'file':
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\ntxt - {state_file_txt}\npdf - {state_file_pdf}\ndocx - {state_file_docx}\nrtf - {state_file_rtf}',reply_markup=keyboards.select_action_file_bot)
        await callback.message.delete()
    elif result == 'back':
        await callback.message.delete()
        await callback.message.answer('–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É:',reply_markup=keyboards.select_work_bot)




@router.callback_query(F.data.startswith('voice_'))
async def bot_setting_voice(callback: CallbackQuery):
    
    global settings
    result = callback.data.split('_')[1]
    
    if result == 'on':
        settings.set_delete_voice_messages(True)
        state_voice = settings.get_settings()["delete_voice_messages"]
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Å\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_voice}',reply_markup=keyboards.select_action_voicemessage_bot)
        await callback.message.delete() 
    elif result == 'back':
        await callback.message.delete()
        await callback.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',reply_markup=keyboards.select_work_bot_on_off)
    else:
        settings.set_delete_voice_messages(False)
        state_voice = settings.get_settings()["delete_voice_messages"]
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Å\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_voice}',reply_markup=keyboards.select_action_voicemessage_bot)
        await callback.message.delete() 
    

@router.message(F.voice)
async def on_voice_message(message: types.Message, bot: Bot):
   if settings.delete_voice_messages:
       await bot.delete_message(message.chat.id, message.message_id)


@router.callback_query(F.data.startswith('videodelete_'))
async def bot_setting_video(callback: CallbackQuery):
    global settings
    result = callback.data.split('_')[1]
    

    if result == 'on':
        settings.set_delete_video_messages(True)
        state_video = settings.get_settings()["delete_video_messages"]
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_video}',reply_markup=keyboards.select_action_video_bot)
        await callback.message.delete() 
    elif result == 'back':
        await callback.message.delete()
        await callback.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',reply_markup=keyboards.select_work_bot_on_off)
    else:
        settings.set_delete_video_messages(False)
        state_video = settings.get_settings()["delete_video_messages"]
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_video}',reply_markup=keyboards.select_action_video_bot)
        await callback.message.delete() 

@router.message(F.video)
async def on_video_message(message: types.Message, bot: Bot):
    if settings.delete_video_messages:
        await bot.delete_message(message.chat.id, message.message_id)

@router.callback_query(F.data.startswith('gifdelete_'))
async def bot_setting_gif(callback: CallbackQuery):
    result = callback.data.split('_')[1]
    global settings

    if result == 'on':
        settings.set_delete_gif_messages(True)
        state_gif = settings.get_settings()["delete_gif_messages"]
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏—Ñ\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_gif}',reply_markup=keyboards.select_action_gif_bot)
        await callback.message.delete() 
    elif result == 'back':
        await callback.message.delete()
        await callback.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',reply_markup=keyboards.select_work_bot_on_off)
    else:
        settings.set_delete_gif_messages(False)
        state_gif = settings.get_settings()["delete_gif_messages"]
        await callback.message.answer(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏—Ñ\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state_gif}',reply_markup=keyboards.select_action_gif_bot)
        await callback.message.delete() 

@router.message(F.animation)
async def on_gif_message(message: types.Message, bot: Bot):
   if settings.delete_gif_messages:
       await bot.delete_message(message.chat.id, message.message_id)


@router.callback_query(F.data.startswith('filedeletemain_'))
async def bot_setting_gif(callback: CallbackQuery):
    result = callback.data.split('_')[1]
    global settings
    state_file_txt = settings.get_settings()["delete_filetxt_messages"]
    state_file_pdf = settings.get_settings()["delete_filepdf_messages"]
    state_file_docx = settings.get_settings()["delete_filedocx_messages"]
    state_file_rtf = settings.get_settings()['delete_filertf_messages']
    
    if result == 'on':
            await callback.message.delete()
            await callback.message.answer(f'–í—ã–±–∏—Ä–µ—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\ntxt - {state_file_txt}\npdf - {state_file_pdf}\ndocx - {state_file_docx}\nrtf - {state_file_rtf}',reply_markup=keyboards.format_file_delete)
    elif result == 'back':
        await callback.message.delete()
        await callback.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',reply_markup=keyboards.select_work_bot_on_off)
    elif result == 'off':
            settings.set_delete_filetxt_messages(False)
            settings.set_delete_filepdf_messages(False)
            settings.set_delete_filedocx_messages(False)
            settings.set_delete_filertf_messages(False)
            state_file_txt = settings.get_settings()["delete_filetxt_messages"]
            state_file_pdf = settings.get_settings()["delete_filepdf_messages"]
            state_file_docx = settings.get_settings()["delete_filedocx_messages"]
            state_file_rtf = settings.get_settings()['delete_filertf_messages']
            await callback.message.delete()
            await callback.message.answer(f'–í—ã–±–∏—Ä–µ—Ç–µ –∫–∞–∫–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å\n–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\ntxt - {state_file_txt}\npdf - {state_file_pdf}\ndocx - {state_file_docx}\nrtf - {state_file_rtf}',reply_markup=keyboards.format_file_delete)
            

@router.callback_query(F.data.startswith('filedelete_'))
async def bot_setting_video(callback: CallbackQuery):
    result = callback.data.split('_')[1]
    global settings
    state_file_txt = settings.get_settings()["delete_filetxt_messages"]
    state_file_pdf = settings.get_settings()["delete_filepdf_messages"]
    state_file_docx = settings.get_settings()["delete_filedocx_messages"]
    state_file_rtf = settings.get_settings()['delete_filertf_messages']

    if result == 'txt':
        settings.set_delete_filetxt_messages(True)
        state_file_txt = settings.get_settings()["delete_filetxt_messages"]
        await callback.message.answer(f'–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\ntxt - {state_file_txt}\npdf - {state_file_pdf}\ndocx - {state_file_docx}\nrtf - {state_file_rtf}',reply_markup=keyboards.format_file_delete)
        await callback.message.delete()
    elif result == 'pdf':
        settings.set_delete_filepdf_messages(True)
        state_file_pdf = settings.get_settings()["delete_filepdf_messages"]
        await callback.message.answer(f'–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\ntxt - {state_file_txt}\npdf - {state_file_pdf}\ndocx - {state_file_docx}\nrtf - {state_file_rtf}',reply_markup=keyboards.format_file_delete)
        await callback.message.delete()
    elif result == 'docx':
        settings.set_delete_filedocx_messages(True)
        state_file_docx = settings.get_settings()["delete_filedocx_messages"]
        await callback.message.answer(f'–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\ntxt - {state_file_txt}\npdf - {state_file_pdf}\ndocx - {state_file_docx}\nrtf - {state_file_rtf}',reply_markup=keyboards.format_file_delete)
        await callback.message.delete()
    elif result == 'rtf':
        settings.set_delete_filertf_messages(True)
        state_file_rtf= settings.get_settings()["delete_filertf_messages"]
        await callback.message.answer(f'–°–µ–π—á–∞—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\ntxt - {state_file_txt}\npdf - {state_file_pdf}\ndocx - {state_file_docx}\nrtf - {state_file_rtf}',reply_markup=keyboards.format_file_delete)
        await callback.message.delete()
    elif result == 'back':
        await callback.message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',reply_markup=keyboards.select_work_bot_on_off)
        await callback.message.delete()


async def get_file_extension(message: Message):
    format_file = message.document.file_name.split('.')[-1]
    return format_file

@router.message(F.content_type == types.ContentType.DOCUMENT)
async def on_message(message: types.Message, bot: Bot): 
    
    file_extension = await get_file_extension(message)
    if file_extension == "txt":
        if settings.set_delete_filetxt_messages:
           await bot.delete_message(message.chat.id, message.message_id)
    elif file_extension == "pdf":
        if settings.set_delete_filepdf_messages:
            await bot.delete_message(message.chat.id, message.message_id)
    elif file_extension == "docx":
        print('wdqwdqw')
        if settings.set_delete_filedocx_messages:
            await bot.delete_message(message.chat.id, message.message_id)
    elif file_extension == "rtf":
        if settings.set_delete_filertf_messages:
            await bot.delete_message(message.chat.id, message.message_id)



@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=ADMINISTRATOR >>  MEMBER))
async def check_bot_admin_status(message: types.Message,bot: Bot):
    new_chat_member = message.new_chat_member
    user = await bot.get_chat_member(chat_id=message.chat.id, user_id=new_chat_member.user.id)
    if user.status != "administrator":
        # bot.dispatcher.disable_for_chat(message.chat.id)
        await message.answer('—è –Ω–µ –∞–¥–º–∏–Ω') 
    # elif user.status == 'administrator':
    #      bot.dispatcher.enable_for_chat(message.chat.id)
    #      await message.answer('—è  –∞–¥–º–∏–Ω') 
        

        

forbidden_commands = ["/set_settings", "/source", "/about"]

@router.message()
async def handle_forbidden_commands(message: types.Message):
    if message.text in forbidden_commands:
        await message.delete()
        await message.reply("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
    elif message.chat.type == 'supergroup':
        if message.chat.is_channel:
            await message.reply('–ì—Ä—É–ø–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É.')